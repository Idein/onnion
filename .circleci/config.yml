version: 2.1

references:
  onnion-ci-base-image: &onnion-ci-base-image "python:3.9.7-bullseye"

commands:
  install-python-dev-tools:
    steps:
      - run:
          name: Install python dev tools and dependencies
          command: |
            apt-get update
            apt-get install -y --no-install-recommends python3-pip
  poetry-install:
    parameters:
      dir:
        type: string
    steps:
      - install-python-dev-tools
      - run:
          name: install poetry
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            poetry config virtualenvs.in-project true
      - run:
          name: poetry install in << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry install
  docker-login:
    steps:
      - run:
          name: Login to docker registry
          command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
  enable-user-mode-emulation:
    steps:
      - run:
          name: Enable user mode emulation
          command: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

jobs:
  lint:
    docker:
      - image: *onnion-ci-base-image
        auth: &docker-hub-auth
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - poetry-install:
          dir: compiler
      - poetry-install:
          dir: runtime
      - run:
          name: Lint onnion
          working_directory: compiler
          command: |
            poetry run pysen run lint
      - run:
          name: Lint onnion-rt
          working_directory: runtime
          command: |
            poetry run pysen run lint

  legacy-test:
    docker:
      - image: *onnion-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install:
          dir: runtime
      - run:
          name: Test onnion-rt
          working_directory: runtime
          command: poetry run pytest -v legacy_tests

  test-on-x86:
    docker:
      - image: *onnion-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install:
          dir: runtime
      - run:
          name: Test onnion-rt on x86
          working_directory: runtime
          command: poetry run pytest --log-cli-level=INFO -v tests
      - run:
          working_directory: runtime
          command: rm -rf tests/__pycache__
      - persist_to_workspace:
          root: .
          paths:
            - runtime

  test-on-arm32:
    docker:
      - image: cimg/base:2021.04
        auth: &docker-hub-auth
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - attach_workspace:
          at: /tmp
      - run: |
          ls /tmp/runtime/tests
      - setup_remote_docker
      - docker-login
      - enable-user-mode-emulation
      - run:
          name: Test onnion-rt on arm32
          command: |
            docker create -v /work --name src arm32v7/debian:11 /bin/true
            docker cp /tmp/runtime src:/work
            docker run --rm --volumes-from src -w /work/runtime idein/onnion-arm32-env python3 -m pytest --log-cli-level=INFO -v tests

  test-by-examples:
    docker:
      - image: *onnion-ci-base-image
        auth: &docker-hub-auth
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - poetry-install:
          dir: examples
      - run:
          name: check ultraface
          working_directory: examples
          command: |
            poetry run make -C ultraface check
      - run:
          name: check ssd
          working_directory: examples
          command: |
            poetry run make -C ssd check

  validate-version-with-tag:
    parameters:
      dir:
        type: string
      package-name:
        type: string
    docker:
      - image: *onnion-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install:
          dir: << parameters.dir >>
      - run:
          name: Check if git tag name is appropriate for package version
          working_directory: << parameters.dir >>
          command: |
            TAG=$(echo ${CIRCLE_TAG} |sed -e 's/<< parameters.package-name >>-//')
            VERSION=$(poetry run python -c 'import pkg_resources; print(pkg_resources.get_distribution("<< parameters.package-name >>").version)')
            echo "Git tag: $TAG"
            echo "Package version: $VERSION"
            test "$VERSION" = "$TAG"

  deploy-onnion:
    docker:
      - image: *onnion-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install:
          dir: compiler
      - run:
          name: Publish wheel & sdist to PyPI
          working_directory: compiler
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN_COMPILER" --no-interaction

  deploy-onnion-rt:
    docker:
      - image: *onnion-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install:
          dir: runtime
      - run:
          name: Publish wheel & sdist to PyPI
          working_directory: runtime
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN_RUNTIME" --no-interaction

workflows:
  version: 2
  commit:
    jobs:
      - lint:
          context:
            - docker-hub-creds
      - legacy-test:
          context:
            - docker-hub-creds
      - test-on-x86:
          context:
            - docker-hub-creds
      - test-on-arm32:
          context:
            - docker-hub-creds
          requires:
            - test-on-x86
      - test-by-examples:
          context:
            - docker-hub-creds

  release-onnion:
    jobs:
      - validate-version-with-tag:
          dir: compiler
          package-name: onnion
          context:
            - docker-hub-creds
          filters: &release-filter
            tags:
              only: /^onnion-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
      - deploy-onnion:
          context:
            - docker-hub-creds
          requires:
            - validate-version-with-tag
          filters: *release-filter

  release-onnion-rt:
    jobs:
      - validate-version-with-tag:
          dir: runtime
          package-name: onnion-rt
          context:
            - docker-hub-creds
          filters: &release-filter
            tags:
              only: /^onnion-rt-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
      - deploy-onnion-rt:
          context:
            - docker-hub-creds
          requires:
            - validate-version-with-tag
          filters: *release-filter
